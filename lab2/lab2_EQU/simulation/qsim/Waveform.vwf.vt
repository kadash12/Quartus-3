// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2019 17:54:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2_EQU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_EQU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg T;
reg V;
reg W;
reg X;
reg Y;
reg Z_L;
// wires                                               
wire Y0;
wire Y1;

// assign statements (if any)                          
lab2_EQU i1 (
// port map - connection between master ports and signals/registers   
	.T(T),
	.V(V),
	.W(W),
	.X(X),
	.Y(Y),
	.Y0(Y0),
	.Y1(Y1),
	.Z_L(Z_L)
);
initial 
begin 
#1200000 $finish;
end 

// T
always
begin
	T = 1'b0;
	T = #100000 1'b1;
	#100000;
end 

// V
always
begin
	V = 1'b0;
	V = #50000 1'b1;
	#50000;
end 

// Y
always
begin
	Y = 1'b0;
	Y = #25000 1'b1;
	#25000;
end 

// W
always
begin
	W = 1'b0;
	W = #100000 1'b1;
	#100000;
end 

// X
always
begin
	X = 1'b0;
	X = #50000 1'b1;
	#50000;
end 

// Z_L
always
begin
	Z_L = 1'b0;
	Z_L = #25000 1'b1;
	#25000;
end 
endmodule

