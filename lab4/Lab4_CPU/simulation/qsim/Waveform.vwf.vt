// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2019 14:52:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab4_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab4_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CIN;
reg CLK;
reg IN0;
reg IN1;
reg IN2;
reg IN3;
reg MSA0;
reg MSA1;
reg MSB0;
reg MSB1;
reg MSC0;
reg MSC1;
reg MSC2;
reg RESET;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire B0;
wire B1;
wire B2;
wire B3;
wire COUT;
wire OUT0;
wire OUT1;
wire OUT2;
wire OUT3;

// assign statements (if any)                          
Lab4_CPU i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.CIN(CIN),
	.CLK(CLK),
	.COUT(COUT),
	.IN0(IN0),
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.MSA0(MSA0),
	.MSA1(MSA1),
	.MSB0(MSB0),
	.MSB1(MSB1),
	.MSC0(MSC0),
	.MSC1(MSC1),
	.MSC2(MSC2),
	.OUT0(OUT0),
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.RESET(RESET)
);
initial 
begin 
#1200000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// CIN
initial
begin
	CIN = 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b1;
end 

// IN3
initial
begin
	IN3 = 1'b0;
	IN3 = #75000 1'b1;
	IN3 = #50000 1'b0;
end 

// IN2
initial
begin
	IN2 = 1'b1;
	IN2 = #125000 1'b0;
end 

// IN1
initial
begin
	IN1 = 1'b1;
	IN1 = #125000 1'b0;
end 

// IN0
initial
begin
	IN0 = 1'b1;
	IN0 = #75000 1'b0;
end 

// MSA1
initial
begin
	MSA1 = 1'b0;
	MSA1 = #125000 1'b1;
end 

// MSA0
initial
begin
	MSA0 = 1'b0;
	MSA0 = #75000 1'b1;
end 

// MSB1
initial
begin
	MSB1 = 1'b1;
	MSB1 = #75000 1'b0;
	MSB1 = #50000 1'b1;
end 

// MSB0
initial
begin
	MSB0 = 1'b0;
end 

// MSC2
initial
begin
	MSC2 = 1'b0;
end 

// MSC1
initial
begin
	MSC1 = 1'b0;
	MSC1 = #125000 1'b1;
	MSC1 = #1050000 1'b0;
end 

// MSC0
initial
begin
	MSC0 = 1'b0;
	MSC0 = #125000 1'b1;
	MSC0 = #1050000 1'b0;
end 
endmodule

