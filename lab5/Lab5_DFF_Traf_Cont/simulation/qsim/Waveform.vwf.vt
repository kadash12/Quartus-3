// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/14/2019 16:23:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab5_DFF_Traf_Cont
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab5_DFF_Traf_Cont_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CW;
reg EV_L;
// wires                                               
wire D0;
wire D1;
wire D2;
wire D3;
wire Green;
wire Red;
wire Yellow;

// assign statements (if any)                          
Lab5_DFF_Traf_Cont i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CW(CW),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.EV_L(EV_L),
	.Green(Green),
	.Red(Red),
	.Yellow(Yellow)
);
initial 
begin 
#1200000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// CW
initial
begin
	CW = 1'b1;
end 

// EV_L
initial
begin
	EV_L = 1'b1;
	EV_L = #400000 1'b0;
	EV_L = #50000 1'b1;
end 
endmodule

